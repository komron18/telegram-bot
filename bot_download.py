import os
import re
import tempfile
from telegram import InputFile, Update
from telegram.ext import ApplicationBuilder, MessageHandler, filters, ContextTypes
from yt_dlp import YoutubeDL

# –¢–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("TELEGRAM_TOKEN")
if not TOKEN:
    raise RuntimeError("‚ùå TELEGRAM_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –î–æ–±–∞–≤—å –µ–≥–æ –≤ Railway ‚Üí Variables.")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ yt-dlp
BASE_OPTS = {
    "format": "best[ext=mp4]/best",
    "noplaylist": True,
    "quiet": True,
}

# –î–æ–º–µ–Ω—ã, –∫–æ—Ç–æ—Ä—ã–µ –±–æ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç
ALLOWED_HOSTS = (
    "tiktok.com",
    "instagram.com",
    "youtu.be",
    "youtube.com",
    "x.com",
    "twitter.com",
)

# Cookies –¥–ª—è —Å–µ—Ä–≤–∏—Å–æ–≤
COOKIES = {
    "instagram.com": "cookies_instagram.txt",
    "youtube.com": "cookies.txt",
    "youtu.be": "cookies.txt",
}

URL_REGEX = re.compile(r"https?://[^\s]+")


async def handle(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.text:
        return

    text = update.message.text.strip()
    urls = [u for u in re.findall(URL_REGEX, text) if any(h in u.lower() for h in ALLOWED_HOSTS)]
    if not urls:
        return

    for url in urls[:3]:  # –º–∞–∫—Å–∏–º—É–º 3 —Å—Å—ã–ª–∫–∏
        with tempfile.TemporaryDirectory() as td:
            try:
                # –ë–∞–∑–æ–≤—ã–µ –æ–ø—Ü–∏–∏
                ydl_opts = {**BASE_OPTS, "outtmpl": f"{td}/%(title)s.%(ext)s"}

                # –í—ã–±–æ—Ä cookies –ø–æ –¥–æ–º–µ–Ω—É
                cookie_file = None
                for domain, path in COOKIES.items():
                    if domain in url:
                        cookie_file = path
                        break

                if cookie_file and os.path.exists(cookie_file):
                    ydl_opts["cookiefile"] = cookie_file

                # –û–±—Ö–æ–¥ Instagram API (–≤–∞–∂–Ω–æ!)
                ydl_opts["force_generic_extractor"] = True

                # –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ
                with YoutubeDL(ydl_opts) as ydl:
                    info = ydl.extract_info(url, download=True)
                    filepath = ydl.prepare_filename(info)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª
                if not os.path.exists(filepath):
                    files = os.listdir(td)
                    if files:
                        filepath = os.path.join(td, files[0])

                if not os.path.exists(filepath):
                    await update.message.reply_text(
                        f"‚ö†Ô∏è Instagram –Ω–µ –¥–∞–ª —Ñ–∞–π–ª –ø–æ —Å—Å—ã–ª–∫–µ:\n{url}\n"
                        "–í–æ–∑–º–æ–∂–Ω–æ, –ø–æ—Å—Ç –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∏–ª–∏ —É–¥–∞–ª—ë–Ω."
                    )
                    continue

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ (–∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç, –µ—Å–ª–∏ –Ω–µ —É–¥–∞—ë—Ç—Å—è)
                try:
                    with open(filepath, "rb") as f:
                        await update.message.reply_video(
                            video=InputFile(f),
                            caption=f"üé¨ –ò–∑: {url}\n–ö–∞–∫ –≤–∞–º —Ç–∞–∫–æ–µ, –ú–∞—Ñ—Ç—É–Ω–∞? üòè",
                        )
                except Exception:
                    with open(filepath, "rb") as f:
                        await update.message.reply_document(
                            document=InputFile(f),
                            caption=f"üìÑ –ò–∑: {url}\n–ö–∞–∫ –≤–∞–º —Ç–∞–∫–æ–µ, –ú–∞—Ñ—Ç—É–Ω–∞? üòè",
                        )

            except Exception as e:
                await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {url}:\n{e}")


if __name__ == "__main__":
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle))
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –∂–¥—ë—Ç —Å—Å—ã–ª–∫–∏...")
    app.run_polling()
